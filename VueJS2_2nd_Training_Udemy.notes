`----------------------------------------------------`
1. List One 
2. List Two 
`----------------------------------------------------`
--> ----> 
==> ===> ====>
`----------------------------------------------------`
[javascript]
function() {
    console.log("Hellow World!");
}
[end]

function(){
        console.log("Hellow World!");
}

`----------------------------------------------------`
`Take Note` #Highlight# "Emphasis" * Important * !Remember! 
//Comment
[Square] (Other) {Brackets}
`----------------------------------------------------`
http://www.google.com
`----------------------------------------------------`

#SECTION 1.1: FIRST BASIC APPLICATION#
[javascript]
    var vueArguments = {
    el: '#app',
    data: {
        title: 'Hello VueJS!',
        googleLink: 'http://www.google.com'
    },
    methods: {
        getText: function() {
        return "Some Text";
        },
        changeTitle: function(event) {
        this.title = this.getText() + ":  " + event.target.value;
        }
    }
    }

    new Vue(vueArguments);
[end]


#SECTION 1.3#
    - Use 'event.target.value;' to get the value of an input control from an event

#SECTION 2.11#
    - Use this to access the variables and methods inside the Vue instance
    - Notice you can combine and use javascript within the {{}} signs:
        [html]
            <p>{{ compundText + ' ' + timeOfNow() }}</p>
            <p>{{ timeOfNow() }}</p>
            <p>{{ 'someString'.toUpperCase() }}</p>
        [end]
#SECTION 2.12#
[javascript]
data: {
    title: 'Hello VueJS!',
    compundText: 'Hello VueJS!',
    googleLink: 'http://www.google.com'
},
[end]

    - This binding wont work, we can't use {{}} in the attributes of the html element
        <a href="{{googleLink}}">Check Google!</a>
    -Instead, you have to use a directive named v-bind,where the argument of v-bind is "href", and afterwhich no curly braces ({{}}) anymore, just Vue syntax
        <a v-bind:href="googleLink">Check Google!</a>
#SECTION 2.13#
        <a v-bind:ARGUMENT="DATA_PROPERTY"></a>
        Binds a value where no {{}} can be used to your object data
        Directive: Instruction in your code
#SECTION 2.14#
    - v-once : Only update the value once <h1 v-once>{{ title}}</h1>
#SECTION 2.16#
    - v-on : Listen to events
        <button v-on:click='ActionToExecute'> Click Me </button>
    - notice the event object is passed 
    - If you pass event and arguments, pass $event when calling the function
    - Use stopPropagation to stop the event function (event.stopPropagation();)
    - Alternatively use stop modifier: 
        <span v-on:mousemove.stop=''> STOP </span>
    - Key events: v-on:keyup='showKey'>
    - Key modifiers: v-on:keyup.enter or v-on:keyup.enter.space

#SECTION 2.22#
    - Use v-model for two way data binding
#SECTION 2.23#
    - IMPORTANT: VueJS update the page (calls method if needed) whenever a data property changes!!!!
                This could trigger and execute unnecessary methods (likes those in the page like {{ updateThis() }}). This method will be called everytime the data property changes ===> In order to avoid this, use computed properties!!!
                Use computed properties to store data that depends on other variables. Computed property only for synchronous tasks!!!
                For Asyncronous code, use WATCH OBJECT
#SECTION 2.24#
    - Alternative to COMPUTED PROPERTIES: watch object. Watch object: over a data property, it does watch when that property changes and react. Computed, on the other hand, it will execute a method when some of its inner property changes.
#SECTION 2.25#
    - Shortcuts: v-on:click='doSomething' ==> @click='doSomething' // v-bind:href='abc' ==> :href='abc'
#SECTION 2.26#
    - :class="{CLASS_1_NAME: BOOLEAN_VALUE_1, CLASS_2_NAME: BOOLEAN_VALUE_2} use that to switch on and off css classes conditionally.
    This can also be added to a computed property and therefore, the logic to choose classes dinamically will be moved into the vue instance
    - v-bind:style="{'background-color': PROPERTY_VALUE}" This will allow to attach the style to a property
    - Assigning classes option:
        :class="[divClasses, {red:true}, otherColor]"
            divClasses is a computed property: 
                - divClasses: function () { return {red: this.attachRed,green: this.attachGreen,yellow:this.attachYellow}}
                - {red:true} ===> {className: activateOrNot}
                - otherColor ===> Data property with class name otherColor: otherColor: 'yellow' or object type: otherColor: {'green': true}
    - Modifying style: Similar to classes, it is possible to add object: 
            <div class="demo" :style="divStyle"></div>
            
            computed: {
                divStyle: function () {
                    return {
                        "background-color": this.divColor,
                        width: this.divWidth + 'px'
                }
            }
